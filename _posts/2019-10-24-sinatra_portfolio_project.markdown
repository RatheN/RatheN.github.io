---
layout: post
title:      "Sinatra Portfolio Project"
date:       2019-10-24 22:58:31 +0000
permalink:  sinatra_portfolio_project
---

## Introduction

     Creativity is a key aspect of coding. Flatiron encourages creativity, that’s one of the main reasons I joined the course. Normal lessons on Learn have gradually built my knowledge of different skills and equipped me with the tools necessary to complete portfolio projects. However, unlike normal lessons, these projects also allow me to be as creative as I’d like. 
		 
## About This Project

     Portfolio projects are always an exciting challenge. Creating a functioning app can be very gratifying. I find that I retain a solid foundational knowledge of the skills that these projects cover. These skills will undoubtedly be invaluable in the future. This is why I get so excited for these projects. 

     The Sinatra project is a great example of why I have enjoyed this course so much. This project not only tested my knowledge of the skills that I learned in this section, but also required me to use skills that I learned at the beginning of the course. Completing the project would have been impossible without using skills that students learned in the first month of the course. Throughout the course, we have been constantly learning new things that have led us to this point, creating a functional app! The goal is simple, create an MVC app using Sinatra, but that is only the beginning. Aside from a few more requirements, it was up to me to decide what information the app will manage, how the app will function, special features that the app will utilize, and everything else that goes into building a functional app. This project was a big step up from the Data Gem CLI. Like the Sinatra project, the CLI project challenged me and I learned a lot from it. I was proud of my work in the end, and the Sinatra project was no different. It’s inspiring to see a project that you built from the ground up turn into something resembling a real Website. This led me to spending a lot of time working on making the app look and work like a real Website. I ended up spending a lot more time on the project than I needed to, but I truly enjoy spending the extra time to learn new things and  make something I’m truly proud of. This was a big part of why I enjoyed the project so much.
		 
## Pre-Code

	I really enjoyed the first portfolio project, so I was excited to get started on this one. Starting a new project can often be intimidating. I’ve found that taking a deep breath and spending an hour or two searching the Internet for ideas and inspiration can be extremely helpful. I had a lot more trouble deciding on a topic for this project, but I had lots of ideas on how to make it special. My favorite part of the coding process is tinkering with my working code to improve it anyway that I can. Unfortunately, I often get ahead of myself and waste time working on things that are later changed or left out of the final product. After gathering some ideas and taking a look at the work of other students, I decided to make an app that manages reviews of different games. I wanted the app to allow a user to make a review of a game of any type. I also wanted the users to be able to view their own reviews, and the reviews that other users posted. Once I had an idea, I made some notes on specific goals that I had and created a general template of how the app should be structured.
	
## The Process

     Once I had an idea of what the app should do and how it should work, I began creating my app. I started by creating the project with the Corneal gem. This gem was extremely helpful because it created the files, the database, and file structure that I would be using. Once I had the files that I needed, I began working on the general structure of the controllers. I created some of the basic HTTP methods. I soon discovered that this isn’t the most efficient way of starting the project, but I was able to create a lot of the methods that I would be using because of the notes that I made before starting. I was able to finish the ApplicationController, containing the configure block, root URL method, and helpers method. The configure block sets the views file location for the controller. It also enables sessions and sets a session secret, this allows users to login to a personal account. The helpers method is, of course, very helpful. I used helpers to create methods that use sessions to check if a user is logged in and create a current user variable. Once I finished setting up the ApplicationController, I was ready to start working on the other controllers.
		 
     Once I had most of the controller methods set up, I created my views files. I separated them into three folders: games, sessions, and users. The games folder contains the files that create the user’s experience when signed in. I created an index file that displays the games that the user reviewed, a view file that displays the information of a specific game, an edit file that allows the user to edit an existing review, and a new file that allows the user to create new reviews. The sessions folder contains a login file that handles the sign in process for a user. Finally, the users folder handled the process of creating a new account.
		 
     I often wait to work on migrations until I’m absolutely certain of what I want the database to contain. I am overcautious when creating them because I am always afraid of making a mistake and having to make changes to it. After making Create Users and Create Games migrations, I created my models classes. Models establish the has_many and belongs_to relationships between users and games. Users have many game reviews and game reviews belong to a user. I am more comfortable working with migrations now, thanks to the project, so if I were to restart, creating migrations would be one of the first things that I do. Having a proper database set up makes working on the controllers much easier. 
		 
## Improvements
		 
     Once everything was functional and my app was meeting the requirements, I began working on making it better. I started this process by cleaning up my code and making everything as organized and efficient as possible. When I code, I have a tendency to be unorganized. I occasionally leave unnecessary code in and forget to delete things. I also often fail to use separation of concerns. Fortunately, I did enough planning that I had a solid idea of where everything should go before I started. I focused heavily on structure and separation of concerns this time, but there were still some things that I needed to move around, especially in the controllers. Once I was satisfied with everything, I began working on the CSS styling. This was a fun process and I learned a lot from it, but it was very frustrating at times. I had lots of ideas for things that I could do to make it look more professional, but not everything worked as I expected and I failed to accomplish a lot of my favorite ideas. I believe that if I spent more time on the styling I could have made it a lot nicer, but that wasn’t the purpose of the project. However I was able to create a drop down menu for the games and a navbar that looks pretty nice. I’m happy with what I accomplished, even if it was simple, but I hope to improve on these skills in the future. The most important thing is that it works!
		 
## Mistakes
     I made lots of mistakes when creating my app, but I believe that I’ve learned from them and I hope to never make them again. Some of the biggest things that I would do differently if I restarted are: creating a more useful and detailed app; improving the order that I complete tasks; Adding more images and visuals to the app; improving the structure of my views files; and changing the structure of the layout.
	
## For the Future
	
     Mistakes can be discouraging, but they can also be incredibly useful if you can use them to learn. Fortunately, this is not the end of my coding journey. I will never stop learning new things and improving as a coder. I am proud of what I created and I’m excited for what’s next.

